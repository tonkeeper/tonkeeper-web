/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Oracle } from './Oracle';
import {
    OracleFromJSON,
    OracleFromJSONTyped,
    OracleToJSON,
    OracleToJSONTyped,
} from './Oracle';

/**
 * 
 * @export
 * @interface OracleBridgeParams
 */
export interface OracleBridgeParams {
    /**
     * 
     * @type {string}
     * @memberof OracleBridgeParams
     */
    bridgeAddr: string;
    /**
     * 
     * @type {string}
     * @memberof OracleBridgeParams
     */
    oracleMultisigAddress: string;
    /**
     * 
     * @type {string}
     * @memberof OracleBridgeParams
     */
    externalChainAddress: string;
    /**
     * 
     * @type {Array<Oracle>}
     * @memberof OracleBridgeParams
     */
    oracles: Array<Oracle>;
}

/**
 * Check if a given object implements the OracleBridgeParams interface.
 */
export function instanceOfOracleBridgeParams(value: object): value is OracleBridgeParams {
    if (!('bridgeAddr' in value) || value['bridgeAddr'] === undefined) return false;
    if (!('oracleMultisigAddress' in value) || value['oracleMultisigAddress'] === undefined) return false;
    if (!('externalChainAddress' in value) || value['externalChainAddress'] === undefined) return false;
    if (!('oracles' in value) || value['oracles'] === undefined) return false;
    return true;
}

export function OracleBridgeParamsFromJSON(json: any): OracleBridgeParams {
    return OracleBridgeParamsFromJSONTyped(json, false);
}

export function OracleBridgeParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OracleBridgeParams {
    if (json == null) {
        return json;
    }
    return {
        
        'bridgeAddr': json['bridge_addr'],
        'oracleMultisigAddress': json['oracle_multisig_address'],
        'externalChainAddress': json['external_chain_address'],
        'oracles': ((json['oracles'] as Array<any>).map(OracleFromJSON)),
    };
}

  export function OracleBridgeParamsToJSON(json: any): OracleBridgeParams {
      return OracleBridgeParamsToJSONTyped(json, false);
  }

  export function OracleBridgeParamsToJSONTyped(value?: OracleBridgeParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bridge_addr': value['bridgeAddr'],
        'oracle_multisig_address': value['oracleMultisigAddress'],
        'external_chain_address': value['externalChainAddress'],
        'oracles': ((value['oracles'] as Array<any>).map(OracleToJSON)),
    };
}

