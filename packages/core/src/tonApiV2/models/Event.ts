/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Action } from './Action';
import {
    ActionFromJSON,
    ActionFromJSONTyped,
    ActionToJSON,
    ActionToJSONTyped,
} from './Action';
import type { ValueFlow } from './ValueFlow';
import {
    ValueFlowFromJSON,
    ValueFlowFromJSONTyped,
    ValueFlowToJSON,
    ValueFlowToJSONTyped,
} from './ValueFlow';

/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    eventId: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    timestamp: number;
    /**
     * 
     * @type {Array<Action>}
     * @memberof Event
     */
    actions: Array<Action>;
    /**
     * 
     * @type {Array<ValueFlow>}
     * @memberof Event
     */
    valueFlow: Array<ValueFlow>;
    /**
     * scam
     * @type {boolean}
     * @memberof Event
     */
    isScam: boolean;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    lt: number;
    /**
     * Event is not finished yet. Transactions still happening
     * @type {boolean}
     * @memberof Event
     */
    inProgress: boolean;
}

/**
 * Check if a given object implements the Event interface.
 */
export function instanceOfEvent(value: object): value is Event {
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('actions' in value) || value['actions'] === undefined) return false;
    if (!('valueFlow' in value) || value['valueFlow'] === undefined) return false;
    if (!('isScam' in value) || value['isScam'] === undefined) return false;
    if (!('lt' in value) || value['lt'] === undefined) return false;
    if (!('inProgress' in value) || value['inProgress'] === undefined) return false;
    return true;
}

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if (json == null) {
        return json;
    }
    return {
        
        'eventId': json['event_id'],
        'timestamp': json['timestamp'],
        'actions': ((json['actions'] as Array<any>).map(ActionFromJSON)),
        'valueFlow': ((json['value_flow'] as Array<any>).map(ValueFlowFromJSON)),
        'isScam': json['is_scam'],
        'lt': json['lt'],
        'inProgress': json['in_progress'],
    };
}

export function EventToJSON(json: any): Event {
    return EventToJSONTyped(json, false);
}

export function EventToJSONTyped(value?: Event | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'event_id': value['eventId'],
        'timestamp': value['timestamp'],
        'actions': ((value['actions'] as Array<any>).map(ActionToJSON)),
        'value_flow': ((value['valueFlow'] as Array<any>).map(ValueFlowToJSON)),
        'is_scam': value['isScam'],
        'lt': value['lt'],
        'in_progress': value['inProgress'],
    };
}

