/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EcPreview } from './EcPreview';
import {
    EcPreviewFromJSON,
    EcPreviewFromJSONTyped,
    EcPreviewToJSON,
    EcPreviewToJSONTyped,
} from './EcPreview';
import type { EncryptedComment } from './EncryptedComment';
import {
    EncryptedCommentFromJSON,
    EncryptedCommentFromJSONTyped,
    EncryptedCommentToJSON,
    EncryptedCommentToJSONTyped,
} from './EncryptedComment';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
    AccountAddressToJSONTyped,
} from './AccountAddress';

/**
 * 
 * @export
 * @interface ExtraCurrencyTransferAction
 */
export interface ExtraCurrencyTransferAction {
    /**
     * 
     * @type {AccountAddress}
     * @memberof ExtraCurrencyTransferAction
     */
    sender: AccountAddress;
    /**
     * 
     * @type {AccountAddress}
     * @memberof ExtraCurrencyTransferAction
     */
    recipient: AccountAddress;
    /**
     * amount in quanta of tokens
     * @type {string}
     * @memberof ExtraCurrencyTransferAction
     */
    amount: string;
    /**
     * 
     * @type {string}
     * @memberof ExtraCurrencyTransferAction
     */
    comment?: string;
    /**
     * 
     * @type {EncryptedComment}
     * @memberof ExtraCurrencyTransferAction
     */
    encryptedComment?: EncryptedComment;
    /**
     * 
     * @type {EcPreview}
     * @memberof ExtraCurrencyTransferAction
     */
    currency: EcPreview;
}

/**
 * Check if a given object implements the ExtraCurrencyTransferAction interface.
 */
export function instanceOfExtraCurrencyTransferAction(value: object): value is ExtraCurrencyTransferAction {
    if (!('sender' in value) || value['sender'] === undefined) return false;
    if (!('recipient' in value) || value['recipient'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    return true;
}

export function ExtraCurrencyTransferActionFromJSON(json: any): ExtraCurrencyTransferAction {
    return ExtraCurrencyTransferActionFromJSONTyped(json, false);
}

export function ExtraCurrencyTransferActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtraCurrencyTransferAction {
    if (json == null) {
        return json;
    }
    return {
        
        'sender': AccountAddressFromJSON(json['sender']),
        'recipient': AccountAddressFromJSON(json['recipient']),
        'amount': json['amount'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'encryptedComment': json['encrypted_comment'] == null ? undefined : EncryptedCommentFromJSON(json['encrypted_comment']),
        'currency': EcPreviewFromJSON(json['currency']),
    };
}

  export function ExtraCurrencyTransferActionToJSON(json: any): ExtraCurrencyTransferAction {
      return ExtraCurrencyTransferActionToJSONTyped(json, false);
  }

  export function ExtraCurrencyTransferActionToJSONTyped(value?: ExtraCurrencyTransferAction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sender': AccountAddressToJSON(value['sender']),
        'recipient': AccountAddressToJSON(value['recipient']),
        'amount': value['amount'],
        'comment': value['comment'],
        'encrypted_comment': EncryptedCommentToJSON(value['encryptedComment']),
        'currency': EcPreviewToJSON(value['currency']),
    };
}

