/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { JettonPreview } from './JettonPreview';
import {
    JettonPreviewFromJSON,
    JettonPreviewFromJSONTyped,
    JettonPreviewToJSON,
    JettonPreviewToJSONTyped,
} from './JettonPreview';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
    AccountAddressToJSONTyped,
} from './AccountAddress';

/**
 * 
 * @export
 * @interface JettonOperation
 */
export interface JettonOperation {
    /**
     * 
     * @type {string}
     * @memberof JettonOperation
     */
    operation: JettonOperationOperationEnum;
    /**
     * 
     * @type {number}
     * @memberof JettonOperation
     */
    utime: number;
    /**
     * 
     * @type {number}
     * @memberof JettonOperation
     */
    lt: number;
    /**
     * 
     * @type {string}
     * @memberof JettonOperation
     */
    transactionHash: string;
    /**
     * 
     * @type {AccountAddress}
     * @memberof JettonOperation
     */
    source?: AccountAddress;
    /**
     * 
     * @type {AccountAddress}
     * @memberof JettonOperation
     */
    destination?: AccountAddress;
    /**
     * 
     * @type {string}
     * @memberof JettonOperation
     */
    amount: string;
    /**
     * 
     * @type {JettonPreview}
     * @memberof JettonOperation
     */
    jetton: JettonPreview;
    /**
     * 
     * @type {string}
     * @memberof JettonOperation
     */
    traceId: string;
    /**
     * 
     * @type {string}
     * @memberof JettonOperation
     */
    queryId: string;
    /**
     * 
     * @type {any}
     * @memberof JettonOperation
     */
    payload?: any | null;
}


/**
 * @export
 */
export const JettonOperationOperationEnum = {
    Transfer: 'transfer',
    Mint: 'mint',
    Burn: 'burn'
} as const;
export type JettonOperationOperationEnum = typeof JettonOperationOperationEnum[keyof typeof JettonOperationOperationEnum];


/**
 * Check if a given object implements the JettonOperation interface.
 */
export function instanceOfJettonOperation(value: object): value is JettonOperation {
    if (!('operation' in value) || value['operation'] === undefined) return false;
    if (!('utime' in value) || value['utime'] === undefined) return false;
    if (!('lt' in value) || value['lt'] === undefined) return false;
    if (!('transactionHash' in value) || value['transactionHash'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('jetton' in value) || value['jetton'] === undefined) return false;
    if (!('traceId' in value) || value['traceId'] === undefined) return false;
    if (!('queryId' in value) || value['queryId'] === undefined) return false;
    return true;
}

export function JettonOperationFromJSON(json: any): JettonOperation {
    return JettonOperationFromJSONTyped(json, false);
}

export function JettonOperationFromJSONTyped(json: any, ignoreDiscriminator: boolean): JettonOperation {
    if (json == null) {
        return json;
    }
    return {
        
        'operation': json['operation'],
        'utime': json['utime'],
        'lt': json['lt'],
        'transactionHash': json['transaction_hash'],
        'source': json['source'] == null ? undefined : AccountAddressFromJSON(json['source']),
        'destination': json['destination'] == null ? undefined : AccountAddressFromJSON(json['destination']),
        'amount': json['amount'],
        'jetton': JettonPreviewFromJSON(json['jetton']),
        'traceId': json['trace_id'],
        'queryId': json['query_id'],
        'payload': json['payload'] == null ? undefined : json['payload'],
    };
}

  export function JettonOperationToJSON(json: any): JettonOperation {
      return JettonOperationToJSONTyped(json, false);
  }

  export function JettonOperationToJSONTyped(value?: JettonOperation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'operation': value['operation'],
        'utime': value['utime'],
        'lt': value['lt'],
        'transaction_hash': value['transactionHash'],
        'source': AccountAddressToJSON(value['source']),
        'destination': AccountAddressToJSON(value['destination']),
        'amount': value['amount'],
        'jetton': JettonPreviewToJSON(value['jetton']),
        'trace_id': value['traceId'],
        'query_id': value['queryId'],
        'payload': value['payload'],
    };
}

