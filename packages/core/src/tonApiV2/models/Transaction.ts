/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StoragePhase } from './StoragePhase';
import {
    StoragePhaseFromJSON,
    StoragePhaseFromJSONTyped,
    StoragePhaseToJSON,
    StoragePhaseToJSONTyped,
} from './StoragePhase';
import type { AccountStatus } from './AccountStatus';
import {
    AccountStatusFromJSON,
    AccountStatusFromJSONTyped,
    AccountStatusToJSON,
    AccountStatusToJSONTyped,
} from './AccountStatus';
import type { TransactionType } from './TransactionType';
import {
    TransactionTypeFromJSON,
    TransactionTypeFromJSONTyped,
    TransactionTypeToJSON,
    TransactionTypeToJSONTyped,
} from './TransactionType';
import type { ActionPhase } from './ActionPhase';
import {
    ActionPhaseFromJSON,
    ActionPhaseFromJSONTyped,
    ActionPhaseToJSON,
    ActionPhaseToJSONTyped,
} from './ActionPhase';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
    MessageToJSONTyped,
} from './Message';
import type { BouncePhaseType } from './BouncePhaseType';
import {
    BouncePhaseTypeFromJSON,
    BouncePhaseTypeFromJSONTyped,
    BouncePhaseTypeToJSON,
    BouncePhaseTypeToJSONTyped,
} from './BouncePhaseType';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
    AccountAddressToJSONTyped,
} from './AccountAddress';
import type { ComputePhase } from './ComputePhase';
import {
    ComputePhaseFromJSON,
    ComputePhaseFromJSONTyped,
    ComputePhaseToJSON,
    ComputePhaseToJSONTyped,
} from './ComputePhase';
import type { CreditPhase } from './CreditPhase';
import {
    CreditPhaseFromJSON,
    CreditPhaseFromJSONTyped,
    CreditPhaseToJSON,
    CreditPhaseToJSONTyped,
} from './CreditPhase';

/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    hash: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    lt: number;
    /**
     * 
     * @type {AccountAddress}
     * @memberof Transaction
     */
    account: AccountAddress;
    /**
     * 
     * @type {boolean}
     * @memberof Transaction
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    utime: number;
    /**
     * 
     * @type {AccountStatus}
     * @memberof Transaction
     */
    origStatus: AccountStatus;
    /**
     * 
     * @type {AccountStatus}
     * @memberof Transaction
     */
    endStatus: AccountStatus;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    totalFees: number;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    endBalance: number;
    /**
     * 
     * @type {TransactionType}
     * @memberof Transaction
     */
    transactionType: TransactionType;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    stateUpdateOld: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    stateUpdateNew: string;
    /**
     * 
     * @type {Message}
     * @memberof Transaction
     */
    inMsg?: Message;
    /**
     * 
     * @type {Array<Message>}
     * @memberof Transaction
     */
    outMsgs: Array<Message>;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    block: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    prevTransHash?: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    prevTransLt?: number;
    /**
     * 
     * @type {ComputePhase}
     * @memberof Transaction
     */
    computePhase?: ComputePhase;
    /**
     * 
     * @type {StoragePhase}
     * @memberof Transaction
     */
    storagePhase?: StoragePhase;
    /**
     * 
     * @type {CreditPhase}
     * @memberof Transaction
     */
    creditPhase?: CreditPhase;
    /**
     * 
     * @type {ActionPhase}
     * @memberof Transaction
     */
    actionPhase?: ActionPhase;
    /**
     * 
     * @type {BouncePhaseType}
     * @memberof Transaction
     */
    bouncePhase?: BouncePhaseType;
    /**
     * 
     * @type {boolean}
     * @memberof Transaction
     */
    aborted: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Transaction
     */
    destroyed: boolean;
    /**
     * hex encoded boc with raw transaction
     * @type {string}
     * @memberof Transaction
     */
    raw: string;
}



/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): value is Transaction {
    if (!('hash' in value) || value['hash'] === undefined) return false;
    if (!('lt' in value) || value['lt'] === undefined) return false;
    if (!('account' in value) || value['account'] === undefined) return false;
    if (!('success' in value) || value['success'] === undefined) return false;
    if (!('utime' in value) || value['utime'] === undefined) return false;
    if (!('origStatus' in value) || value['origStatus'] === undefined) return false;
    if (!('endStatus' in value) || value['endStatus'] === undefined) return false;
    if (!('totalFees' in value) || value['totalFees'] === undefined) return false;
    if (!('endBalance' in value) || value['endBalance'] === undefined) return false;
    if (!('transactionType' in value) || value['transactionType'] === undefined) return false;
    if (!('stateUpdateOld' in value) || value['stateUpdateOld'] === undefined) return false;
    if (!('stateUpdateNew' in value) || value['stateUpdateNew'] === undefined) return false;
    if (!('outMsgs' in value) || value['outMsgs'] === undefined) return false;
    if (!('block' in value) || value['block'] === undefined) return false;
    if (!('aborted' in value) || value['aborted'] === undefined) return false;
    if (!('destroyed' in value) || value['destroyed'] === undefined) return false;
    if (!('raw' in value) || value['raw'] === undefined) return false;
    return true;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if (json == null) {
        return json;
    }
    return {
        
        'hash': json['hash'],
        'lt': json['lt'],
        'account': AccountAddressFromJSON(json['account']),
        'success': json['success'],
        'utime': json['utime'],
        'origStatus': AccountStatusFromJSON(json['orig_status']),
        'endStatus': AccountStatusFromJSON(json['end_status']),
        'totalFees': json['total_fees'],
        'endBalance': json['end_balance'],
        'transactionType': TransactionTypeFromJSON(json['transaction_type']),
        'stateUpdateOld': json['state_update_old'],
        'stateUpdateNew': json['state_update_new'],
        'inMsg': json['in_msg'] == null ? undefined : MessageFromJSON(json['in_msg']),
        'outMsgs': ((json['out_msgs'] as Array<any>).map(MessageFromJSON)),
        'block': json['block'],
        'prevTransHash': json['prev_trans_hash'] == null ? undefined : json['prev_trans_hash'],
        'prevTransLt': json['prev_trans_lt'] == null ? undefined : json['prev_trans_lt'],
        'computePhase': json['compute_phase'] == null ? undefined : ComputePhaseFromJSON(json['compute_phase']),
        'storagePhase': json['storage_phase'] == null ? undefined : StoragePhaseFromJSON(json['storage_phase']),
        'creditPhase': json['credit_phase'] == null ? undefined : CreditPhaseFromJSON(json['credit_phase']),
        'actionPhase': json['action_phase'] == null ? undefined : ActionPhaseFromJSON(json['action_phase']),
        'bouncePhase': json['bounce_phase'] == null ? undefined : BouncePhaseTypeFromJSON(json['bounce_phase']),
        'aborted': json['aborted'],
        'destroyed': json['destroyed'],
        'raw': json['raw'],
    };
}

  export function TransactionToJSON(json: any): Transaction {
      return TransactionToJSONTyped(json, false);
  }

  export function TransactionToJSONTyped(value?: Transaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'hash': value['hash'],
        'lt': value['lt'],
        'account': AccountAddressToJSON(value['account']),
        'success': value['success'],
        'utime': value['utime'],
        'orig_status': AccountStatusToJSON(value['origStatus']),
        'end_status': AccountStatusToJSON(value['endStatus']),
        'total_fees': value['totalFees'],
        'end_balance': value['endBalance'],
        'transaction_type': TransactionTypeToJSON(value['transactionType']),
        'state_update_old': value['stateUpdateOld'],
        'state_update_new': value['stateUpdateNew'],
        'in_msg': MessageToJSON(value['inMsg']),
        'out_msgs': ((value['outMsgs'] as Array<any>).map(MessageToJSON)),
        'block': value['block'],
        'prev_trans_hash': value['prevTransHash'],
        'prev_trans_lt': value['prevTransLt'],
        'compute_phase': ComputePhaseToJSON(value['computePhase']),
        'storage_phase': StoragePhaseToJSON(value['storagePhase']),
        'credit_phase': CreditPhaseToJSON(value['creditPhase']),
        'action_phase': ActionPhaseToJSON(value['actionPhase']),
        'bounce_phase': BouncePhaseTypeToJSON(value['bouncePhase']),
        'aborted': value['aborted'],
        'destroyed': value['destroyed'],
        'raw': value['raw'],
    };
}

