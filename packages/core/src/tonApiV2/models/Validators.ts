/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Validator } from './Validator';
import {
    ValidatorFromJSON,
    ValidatorFromJSONTyped,
    ValidatorToJSON,
    ValidatorToJSONTyped,
} from './Validator';

/**
 * 
 * @export
 * @interface Validators
 */
export interface Validators {
    /**
     * 
     * @type {number}
     * @memberof Validators
     */
    electAt: number;
    /**
     * 
     * @type {number}
     * @memberof Validators
     */
    electClose: number;
    /**
     * 
     * @type {number}
     * @memberof Validators
     */
    minStake: number;
    /**
     * 
     * @type {number}
     * @memberof Validators
     */
    totalStake: number;
    /**
     * 
     * @type {Array<Validator>}
     * @memberof Validators
     */
    validators: Array<Validator>;
}

/**
 * Check if a given object implements the Validators interface.
 */
export function instanceOfValidators(value: object): value is Validators {
    if (!('electAt' in value) || value['electAt'] === undefined) return false;
    if (!('electClose' in value) || value['electClose'] === undefined) return false;
    if (!('minStake' in value) || value['minStake'] === undefined) return false;
    if (!('totalStake' in value) || value['totalStake'] === undefined) return false;
    if (!('validators' in value) || value['validators'] === undefined) return false;
    return true;
}

export function ValidatorsFromJSON(json: any): Validators {
    return ValidatorsFromJSONTyped(json, false);
}

export function ValidatorsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Validators {
    if (json == null) {
        return json;
    }
    return {
        
        'electAt': json['elect_at'],
        'electClose': json['elect_close'],
        'minStake': json['min_stake'],
        'totalStake': json['total_stake'],
        'validators': ((json['validators'] as Array<any>).map(ValidatorFromJSON)),
    };
}

  export function ValidatorsToJSON(json: any): Validators {
      return ValidatorsToJSONTyped(json, false);
  }

  export function ValidatorsToJSONTyped(value?: Validators | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'elect_at': value['electAt'],
        'elect_close': value['electClose'],
        'min_stake': value['minStake'],
        'total_stake': value['totalStake'],
        'validators': ((value['validators'] as Array<any>).map(ValidatorToJSON)),
    };
}

