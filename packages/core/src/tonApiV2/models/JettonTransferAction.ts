/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { JettonPreview } from './JettonPreview';
import {
    JettonPreviewFromJSON,
    JettonPreviewFromJSONTyped,
    JettonPreviewToJSON,
    JettonPreviewToJSONTyped,
} from './JettonPreview';
import type { Refund } from './Refund';
import {
    RefundFromJSON,
    RefundFromJSONTyped,
    RefundToJSON,
    RefundToJSONTyped,
} from './Refund';
import type { EncryptedComment } from './EncryptedComment';
import {
    EncryptedCommentFromJSON,
    EncryptedCommentFromJSONTyped,
    EncryptedCommentToJSON,
    EncryptedCommentToJSONTyped,
} from './EncryptedComment';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
    AccountAddressToJSONTyped,
} from './AccountAddress';

/**
 * 
 * @export
 * @interface JettonTransferAction
 */
export interface JettonTransferAction {
    /**
     * 
     * @type {AccountAddress}
     * @memberof JettonTransferAction
     */
    sender?: AccountAddress;
    /**
     * 
     * @type {AccountAddress}
     * @memberof JettonTransferAction
     */
    recipient?: AccountAddress;
    /**
     * 
     * @type {string}
     * @memberof JettonTransferAction
     */
    sendersWallet: string;
    /**
     * 
     * @type {string}
     * @memberof JettonTransferAction
     */
    recipientsWallet: string;
    /**
     * amount in quanta of tokens
     * @type {string}
     * @memberof JettonTransferAction
     */
    amount: string;
    /**
     * 
     * @type {string}
     * @memberof JettonTransferAction
     */
    comment?: string;
    /**
     * 
     * @type {EncryptedComment}
     * @memberof JettonTransferAction
     */
    encryptedComment?: EncryptedComment;
    /**
     * 
     * @type {Refund}
     * @memberof JettonTransferAction
     */
    refund?: Refund;
    /**
     * 
     * @type {JettonPreview}
     * @memberof JettonTransferAction
     */
    jetton: JettonPreview;
}

/**
 * Check if a given object implements the JettonTransferAction interface.
 */
export function instanceOfJettonTransferAction(value: object): value is JettonTransferAction {
    if (!('sendersWallet' in value) || value['sendersWallet'] === undefined) return false;
    if (!('recipientsWallet' in value) || value['recipientsWallet'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('jetton' in value) || value['jetton'] === undefined) return false;
    return true;
}

export function JettonTransferActionFromJSON(json: any): JettonTransferAction {
    return JettonTransferActionFromJSONTyped(json, false);
}

export function JettonTransferActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): JettonTransferAction {
    if (json == null) {
        return json;
    }
    return {
        
        'sender': json['sender'] == null ? undefined : AccountAddressFromJSON(json['sender']),
        'recipient': json['recipient'] == null ? undefined : AccountAddressFromJSON(json['recipient']),
        'sendersWallet': json['senders_wallet'],
        'recipientsWallet': json['recipients_wallet'],
        'amount': json['amount'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'encryptedComment': json['encrypted_comment'] == null ? undefined : EncryptedCommentFromJSON(json['encrypted_comment']),
        'refund': json['refund'] == null ? undefined : RefundFromJSON(json['refund']),
        'jetton': JettonPreviewFromJSON(json['jetton']),
    };
}

  export function JettonTransferActionToJSON(json: any): JettonTransferAction {
      return JettonTransferActionToJSONTyped(json, false);
  }

  export function JettonTransferActionToJSONTyped(value?: JettonTransferAction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sender': AccountAddressToJSON(value['sender']),
        'recipient': AccountAddressToJSON(value['recipient']),
        'senders_wallet': value['sendersWallet'],
        'recipients_wallet': value['recipientsWallet'],
        'amount': value['amount'],
        'comment': value['comment'],
        'encrypted_comment': EncryptedCommentToJSON(value['encryptedComment']),
        'refund': RefundToJSON(value['refund']),
        'jetton': JettonPreviewToJSON(value['jetton']),
    };
}

