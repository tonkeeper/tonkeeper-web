/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { JettonBridgePrices } from './JettonBridgePrices';
import {
    JettonBridgePricesFromJSON,
    JettonBridgePricesFromJSONTyped,
    JettonBridgePricesToJSON,
    JettonBridgePricesToJSONTyped,
} from './JettonBridgePrices';
import type { Oracle } from './Oracle';
import {
    OracleFromJSON,
    OracleFromJSONTyped,
    OracleToJSON,
    OracleToJSONTyped,
} from './Oracle';

/**
 * 
 * @export
 * @interface JettonBridgeParams
 */
export interface JettonBridgeParams {
    /**
     * 
     * @type {string}
     * @memberof JettonBridgeParams
     */
    bridgeAddress: string;
    /**
     * 
     * @type {string}
     * @memberof JettonBridgeParams
     */
    oraclesAddress: string;
    /**
     * 
     * @type {number}
     * @memberof JettonBridgeParams
     */
    stateFlags: number;
    /**
     * 
     * @type {number}
     * @memberof JettonBridgeParams
     */
    burnBridgeFee?: number;
    /**
     * 
     * @type {Array<Oracle>}
     * @memberof JettonBridgeParams
     */
    oracles: Array<Oracle>;
    /**
     * 
     * @type {string}
     * @memberof JettonBridgeParams
     */
    externalChainAddress?: string;
    /**
     * 
     * @type {JettonBridgePrices}
     * @memberof JettonBridgeParams
     */
    prices?: JettonBridgePrices;
}

/**
 * Check if a given object implements the JettonBridgeParams interface.
 */
export function instanceOfJettonBridgeParams(value: object): value is JettonBridgeParams {
    if (!('bridgeAddress' in value) || value['bridgeAddress'] === undefined) return false;
    if (!('oraclesAddress' in value) || value['oraclesAddress'] === undefined) return false;
    if (!('stateFlags' in value) || value['stateFlags'] === undefined) return false;
    if (!('oracles' in value) || value['oracles'] === undefined) return false;
    return true;
}

export function JettonBridgeParamsFromJSON(json: any): JettonBridgeParams {
    return JettonBridgeParamsFromJSONTyped(json, false);
}

export function JettonBridgeParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): JettonBridgeParams {
    if (json == null) {
        return json;
    }
    return {
        
        'bridgeAddress': json['bridge_address'],
        'oraclesAddress': json['oracles_address'],
        'stateFlags': json['state_flags'],
        'burnBridgeFee': json['burn_bridge_fee'] == null ? undefined : json['burn_bridge_fee'],
        'oracles': ((json['oracles'] as Array<any>).map(OracleFromJSON)),
        'externalChainAddress': json['external_chain_address'] == null ? undefined : json['external_chain_address'],
        'prices': json['prices'] == null ? undefined : JettonBridgePricesFromJSON(json['prices']),
    };
}

  export function JettonBridgeParamsToJSON(json: any): JettonBridgeParams {
      return JettonBridgeParamsToJSONTyped(json, false);
  }

  export function JettonBridgeParamsToJSONTyped(value?: JettonBridgeParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bridge_address': value['bridgeAddress'],
        'oracles_address': value['oraclesAddress'],
        'state_flags': value['stateFlags'],
        'burn_bridge_fee': value['burnBridgeFee'],
        'oracles': ((value['oracles'] as Array<any>).map(OracleToJSON)),
        'external_chain_address': value['externalChainAddress'],
        'prices': JettonBridgePricesToJSON(value['prices']),
    };
}

