/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BlockCurrencyCollection } from './BlockCurrencyCollection';
import {
    BlockCurrencyCollectionFromJSON,
    BlockCurrencyCollectionFromJSONTyped,
    BlockCurrencyCollectionToJSON,
    BlockCurrencyCollectionToJSONTyped,
} from './BlockCurrencyCollection';

/**
 * 
 * @export
 * @interface BlockValueFlow
 */
export interface BlockValueFlow {
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    fromPrevBlk: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    toNextBlk: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    imported: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    exported: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    feesCollected: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    burned?: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    feesImported: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    recovered: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    created: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    minted: BlockCurrencyCollection;
}

/**
 * Check if a given object implements the BlockValueFlow interface.
 */
export function instanceOfBlockValueFlow(value: object): value is BlockValueFlow {
    if (!('fromPrevBlk' in value) || value['fromPrevBlk'] === undefined) return false;
    if (!('toNextBlk' in value) || value['toNextBlk'] === undefined) return false;
    if (!('imported' in value) || value['imported'] === undefined) return false;
    if (!('exported' in value) || value['exported'] === undefined) return false;
    if (!('feesCollected' in value) || value['feesCollected'] === undefined) return false;
    if (!('feesImported' in value) || value['feesImported'] === undefined) return false;
    if (!('recovered' in value) || value['recovered'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('minted' in value) || value['minted'] === undefined) return false;
    return true;
}

export function BlockValueFlowFromJSON(json: any): BlockValueFlow {
    return BlockValueFlowFromJSONTyped(json, false);
}

export function BlockValueFlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockValueFlow {
    if (json == null) {
        return json;
    }
    return {
        
        'fromPrevBlk': BlockCurrencyCollectionFromJSON(json['from_prev_blk']),
        'toNextBlk': BlockCurrencyCollectionFromJSON(json['to_next_blk']),
        'imported': BlockCurrencyCollectionFromJSON(json['imported']),
        'exported': BlockCurrencyCollectionFromJSON(json['exported']),
        'feesCollected': BlockCurrencyCollectionFromJSON(json['fees_collected']),
        'burned': json['burned'] == null ? undefined : BlockCurrencyCollectionFromJSON(json['burned']),
        'feesImported': BlockCurrencyCollectionFromJSON(json['fees_imported']),
        'recovered': BlockCurrencyCollectionFromJSON(json['recovered']),
        'created': BlockCurrencyCollectionFromJSON(json['created']),
        'minted': BlockCurrencyCollectionFromJSON(json['minted']),
    };
}

  export function BlockValueFlowToJSON(json: any): BlockValueFlow {
      return BlockValueFlowToJSONTyped(json, false);
  }

  export function BlockValueFlowToJSONTyped(value?: BlockValueFlow | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'from_prev_blk': BlockCurrencyCollectionToJSON(value['fromPrevBlk']),
        'to_next_blk': BlockCurrencyCollectionToJSON(value['toNextBlk']),
        'imported': BlockCurrencyCollectionToJSON(value['imported']),
        'exported': BlockCurrencyCollectionToJSON(value['exported']),
        'fees_collected': BlockCurrencyCollectionToJSON(value['feesCollected']),
        'burned': BlockCurrencyCollectionToJSON(value['burned']),
        'fees_imported': BlockCurrencyCollectionToJSON(value['feesImported']),
        'recovered': BlockCurrencyCollectionToJSON(value['recovered']),
        'created': BlockCurrencyCollectionToJSON(value['created']),
        'minted': BlockCurrencyCollectionToJSON(value['minted']),
    };
}

