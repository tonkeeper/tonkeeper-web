/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GaslessEstimateRequestMessagesInner } from './GaslessEstimateRequestMessagesInner';
import {
    GaslessEstimateRequestMessagesInnerFromJSON,
    GaslessEstimateRequestMessagesInnerFromJSONTyped,
    GaslessEstimateRequestMessagesInnerToJSON,
    GaslessEstimateRequestMessagesInnerToJSONTyped,
} from './GaslessEstimateRequestMessagesInner';

/**
 * 
 * @export
 * @interface GaslessEstimateRequest
 */
export interface GaslessEstimateRequest {
    /**
     * TONAPI verifies that the account has enough jettons to pay the commission and make a transfer.
     * @type {boolean}
     * @memberof GaslessEstimateRequest
     */
    throwErrorIfNotEnoughJettons?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GaslessEstimateRequest
     */
    returnEmulation?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GaslessEstimateRequest
     */
    walletAddress: string;
    /**
     * 
     * @type {string}
     * @memberof GaslessEstimateRequest
     */
    walletPublicKey: string;
    /**
     * 
     * @type {Array<GaslessEstimateRequestMessagesInner>}
     * @memberof GaslessEstimateRequest
     */
    messages: Array<GaslessEstimateRequestMessagesInner>;
}

/**
 * Check if a given object implements the GaslessEstimateRequest interface.
 */
export function instanceOfGaslessEstimateRequest(value: object): value is GaslessEstimateRequest {
    if (!('walletAddress' in value) || value['walletAddress'] === undefined) return false;
    if (!('walletPublicKey' in value) || value['walletPublicKey'] === undefined) return false;
    if (!('messages' in value) || value['messages'] === undefined) return false;
    return true;
}

export function GaslessEstimateRequestFromJSON(json: any): GaslessEstimateRequest {
    return GaslessEstimateRequestFromJSONTyped(json, false);
}

export function GaslessEstimateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GaslessEstimateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'throwErrorIfNotEnoughJettons': json['throw_error_if_not_enough_jettons'] == null ? undefined : json['throw_error_if_not_enough_jettons'],
        'returnEmulation': json['return_emulation'] == null ? undefined : json['return_emulation'],
        'walletAddress': json['wallet_address'],
        'walletPublicKey': json['wallet_public_key'],
        'messages': ((json['messages'] as Array<any>).map(GaslessEstimateRequestMessagesInnerFromJSON)),
    };
}

  export function GaslessEstimateRequestToJSON(json: any): GaslessEstimateRequest {
      return GaslessEstimateRequestToJSONTyped(json, false);
  }

  export function GaslessEstimateRequestToJSONTyped(value?: GaslessEstimateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'throw_error_if_not_enough_jettons': value['throwErrorIfNotEnoughJettons'],
        'return_emulation': value['returnEmulation'],
        'wallet_address': value['walletAddress'],
        'wallet_public_key': value['walletPublicKey'],
        'messages': ((value['messages'] as Array<any>).map(GaslessEstimateRequestMessagesInnerToJSON)),
    };
}

