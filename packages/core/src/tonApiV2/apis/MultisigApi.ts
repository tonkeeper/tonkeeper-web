/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetOpenapiJsonDefaultResponse,
  Multisig,
  MultisigOrder,
} from '../models/index';
import {
    GetOpenapiJsonDefaultResponseFromJSON,
    GetOpenapiJsonDefaultResponseToJSON,
    MultisigFromJSON,
    MultisigToJSON,
    MultisigOrderFromJSON,
    MultisigOrderToJSON,
} from '../models/index';

export interface GetMultisigAccountRequest {
    accountId: string;
}

export interface GetMultisigOrderRequest {
    accountId: string;
}

/**
 * MultisigApi - interface
 * 
 * @export
 * @interface MultisigApiInterface
 */
export interface MultisigApiInterface {
    /**
     * Get multisig account info
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultisigApiInterface
     */
    getMultisigAccountRaw(requestParameters: GetMultisigAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Multisig>>;

    /**
     * Get multisig account info
     */
    getMultisigAccount(requestParameters: GetMultisigAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Multisig>;

    /**
     * Get multisig order
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MultisigApiInterface
     */
    getMultisigOrderRaw(requestParameters: GetMultisigOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultisigOrder>>;

    /**
     * Get multisig order
     */
    getMultisigOrder(requestParameters: GetMultisigOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultisigOrder>;

}

/**
 * 
 */
export class MultisigApi extends runtime.BaseAPI implements MultisigApiInterface {

    /**
     * Get multisig account info
     */
    async getMultisigAccountRaw(requestParameters: GetMultisigAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Multisig>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getMultisigAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/multisig/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MultisigFromJSON(jsonValue));
    }

    /**
     * Get multisig account info
     */
    async getMultisigAccount(requestParameters: GetMultisigAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Multisig> {
        const response = await this.getMultisigAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get multisig order
     */
    async getMultisigOrderRaw(requestParameters: GetMultisigOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultisigOrder>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling getMultisigOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/multisig/order/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MultisigOrderFromJSON(jsonValue));
    }

    /**
     * Get multisig order
     */
    async getMultisigOrder(requestParameters: GetMultisigOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultisigOrder> {
        const response = await this.getMultisigOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
